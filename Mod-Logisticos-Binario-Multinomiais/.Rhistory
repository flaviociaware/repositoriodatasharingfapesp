pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","stargazer","lmtest","caret","pROC","ROCR","nnet",
"magick","cowplot","globals","equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load("challenger.RData")
challenger %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
summary(challenger)
challenger %>%
mutate(falha = ifelse(desgaste > 0,
yes = "sim",
no = "não"),
falha = factor(falha)) -> challenger
challenger %>%
select(desgaste, falha, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
modelo_challenger <- glm(formula = falha ~ . -desgaste -t,
data = challenger,
family = "binomial")
summary(modelo_challenger)
summ(model = modelo_challenger, confint = T, digits = 4, ci.width = 0.95)
export_summs(modelo_challenger, scale = F, digits = 4)
step_challenger <- step(object = modelo_challenger,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
summ(model = step_challenger, confint = T, digits = 4, ci.width = 0.95)
predict(object = step_challenger,
data.frame(temperatura = 70),
type = "response")
predict(object = step_challenger,
data.frame(temperatura = 77),
type = "response")
predict(object = step_challenger,
data.frame(temperatura = 34),
type = "response")
ggplotly(
challenger %>%
mutate(phat = predict(object = step_challenger,
newdata = challenger,
type = "response"),
falha = as.numeric(falha) - 1) %>%
ggplot() +
geom_point(aes(x = temperatura, y = falha), color = "#95D840FF", size = 2) +
geom_smooth(aes(x = temperatura, y = phat),
method = "glm", formula = y ~ x,
method.args = list(family = "binomial"),
se = F,
color = "#440154FF", size = 2) +
labs(x = "Temperatura",
y = "Falha") +
theme_bw()
)
image_scale(image_read("https://img.ibxk.com.br///2016/01/29/29182307148581.jpg?w=1200&h=675&mode=crop&scale=both"),
"x320")
load("dados_fidelidade.RData")
dados_fidelidade %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 13)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
#install.packages("equatiomatic")
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr", "kableExtra",
"splines","reshape2","PerformanceAnalytics","correlation","see",
"ggraph","psych","nortest","rgl","car","ggside","tidyquant","olsrr",
"jtools","ggstance","magick","cowplot","emojifont","beepr","Rcpp", "equatiomatic",
"palmerpenguins", "ggplot2", "latex2exp","pROC","ROCR","nnet","stargazer","lmtest","globals","caret")
# https://www.rdocumentation.org/packages/equatiomatic/versions/0.3.1
# desenvolvedores:
#remotes::install_github("datalorax/equatiomatic", force = TRUE)
#
#
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
Estudo <- read.csv("/Users/fbarbosa/git/repositoriodatasharingfapesp/R/obito-ida-gen-f-data-tcc-fb-desfecho-quali-binario.csv", header=TRUE)
#estudo <- read.csv("/Users/Flavio Barbosa/git/repositoriodatasharingfapesp/R/data-tcc-fb-desfechos.csv", header=TRUE)
head(Estudo)
# removendo valores NA (se existirem)
Estudo <- drop_na(Estudo)
glimpse(Estudo)
Estudo_mix <- Estudo[,c(2,3,5)]
glimpse(Estudo_mix)
Estudo_simples <- Estudo_mix
c
cor(Estudo_simples)
summary(modelo_estudo)
modelo_estudo <- glm(formula = obito ~ idade + feminino,
data = Estudo,
family = "binomial")
confusionMatrix(
table(predict(modelo_estudo_stepped, type = "response")>=1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1]
)
modelo_estudo_stepped <- step(modelo_estudo, k = (qchisq(p=0.05,df=1,lower.tail=F)) )
export_summs(modelo_estudo_stepped, scale = F, digits = 6)
confusionMatrix(table(predict(modelo_estudo_stepped, type = "response") >= 0.5,
Estudo$obito == TRUE)[2:1, 2:1])
confusionMatrix(
table(predict(modelo_estudo_stepped, type = "response")>=1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1]
)
confusionMatrix(
table(predict(modelo_estudo_stepped, type = "response")>=9.178484e-03,
Estudo$obito == TRUE)[2:1, 2:1]
)
confusionMatrix(
table(predict(modelo_estudo_stepped, type = "response")>=8.570472e-05,
Estudo$obito == TRUE)[2:1, 2:1]
)
confusionMatrix(
table(predict(modelo_estudo_stepped, type = "response")>=1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1]
)
data.frame(Sensitividade = confusionMatrix(table(predict(modelo_estudo_stepped,
type = "response") >= 1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1])[["byClass"]][["Sensitivity"]],
Especificidade = confusionMatrix(table(predict(modelo_estudo_stepped,
type = "response") >= 1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1])[["byClass"]][["Specificity"]],
Acurácia = confusionMatrix(table(predict(modelo_estudo_stepped,
type = "response") >= 1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1])[["overall"]][["Accuracy"]]) %>%
kable() %>%
kable_styling(bootstrap_options = "striped", position = "center",
full_width = F,
font_size = 27)
data.frame(Sensitividade = confusionMatrix(table(predict(modelo_estudo_stepped,
type = "response") >= 1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1])[["byClass"]][["Sensitivity"]],
Especificidade = confusionMatrix(table(predict(modelo_estudo_stepped,
type = "response") >= 1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1])[["byClass"]][["Specificity"]],
Acurácia = confusionMatrix(table(predict(modelo_estudo_stepped,
type = "response") >= 1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1])[["overall"]][["Accuracy"]]) %>%
kable() %>%
kable_styling(bootstrap_options = "striped", position = "center",
full_width = F,
font_size = 27)
confusionMatrix(
table(predict(modelo_estudo_stepped, type = "response")>=1.083127e-02,
Estudo$obito == TRUE)[2:1, 2:1]
)
ggplot() +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "grey40", size = 0.2) +
geom_line(aes(x = 1 - especificidade_estudo, y = sensitividade_estudo),
color = "darkorchid", size = 2) +
labs(x = "1 - Especificidade",
y = "Sensitividade",
title = paste("Área abaixo da curva:",
round(ROC_Estudo$auc, 4),
"|",
"Coeficiente de Gini:",
round((ROC_Estudo$auc[1] - 0.5) / 0.5, 4))) +
theme(panel.background = element_rect(NA),
panel.border = element_rect(color = "black", fill = NA),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10)
)
ROC_Estudo <- roc(response = Estudo$obito,
predictor = modelo_estudo_stepped$fitted.values)
ggplot() +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "grey40", size = 0.2) +
geom_line(aes(x = 1 - especificidade_estudo, y = sensitividade_estudo),
color = "darkorchid", size = 2) +
labs(x = "1 - Especificidade",
y = "Sensitividade",
title = paste("Área abaixo da curva:",
round(ROC_Estudo$auc, 4),
"|",
"Coeficiente de Gini:",
round((ROC_Estudo$auc[1] - 0.5) / 0.5, 4))) +
theme(panel.background = element_rect(NA),
panel.border = element_rect(color = "black", fill = NA),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10)
)
predicoes_estudo <- prediction(predictions = modelo_estudo_stepped$fitted.values,
labels = Estudo$obito)
#a função prediction, do pacote ROCR, cria um objeto com os dados necessários
#para a futura plotagem da curva ROC.
#função performance do pacote ROCR
dados_curva_roc_estudo <- performance(predicoes_estudo, measure = "sens")
#A função peformance(), do pacote ROCR, extraiu do objeto 'predicoes' os
#dados de sensitividade, de sensibilidade e de especificidade para a plotagem.
#Porém, desejamos os dados da sensitividade, então devemos fazer o seguinte
#ajuste:
sensitividade_estudo <- dados_curva_roc_estudo@y.values[[1]]
#extraindo dados da sensitividade do modelo
especificidade_estudo <- performance(predicoes_estudo, measure = "spec")
#extraindo os dados da especificidade, mas também há que se fazer um ajuste para a
#plotagem:
especificidade_estudo <- especificidade_estudo@y.values[[1]]
cutoffs_estudo <- dados_curva_roc_estudo@x.values[[1]]
cutoffs_estudo
#extraindo os cutoffs do objeto 'sensitividade'.
#Até o momento, foram extraídos 3 vetores: 'sensitividade', 'especificidade'
#e 'cutoffs'. Poder-se-ia plotar normalmente a partir daqui com a linguagem
#base do R, mas demos preferência à ferramenta ggplot2. Assim, criamos um data
#frame que contém os vetores mencionados.
dados_plotagem_estudo <- cbind.data.frame(cutoffs_estudo, especificidade_estudo, sensitividade_estudo)
ggplot() +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "grey40", size = 0.2) +
geom_line(aes(x = 1 - especificidade_estudo, y = sensitividade_estudo),
color = "darkorchid", size = 2) +
labs(x = "1 - Especificidade",
y = "Sensitividade",
title = paste("Área abaixo da curva:",
round(ROC_Estudo$auc, 4),
"|",
"Coeficiente de Gini:",
round((ROC_Estudo$auc[1] - 0.5) / 0.5, 4))) +
theme(panel.background = element_rect(NA),
panel.border = element_rect(color = "black", fill = NA),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10)
)
